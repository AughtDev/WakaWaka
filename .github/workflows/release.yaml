name: Android CI/CD Release

on:
  push:
    branches:
      - main # Or your default branch

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          # Important: Need a token that allows pushing back to the repo for version bump
          token: ${{ secrets.GITHUB_TOKEN }}

      # 1. Setup Java/JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: Set up Node.js
        uses: actions/setup-node@v4 # Use a modern version of setup-node
        with:
          node-version: '20' # Or '18'. This ensures a modern environment.

      # 2. Increment Version
      - name: Bump Version Code and Name
        uses: DoubleSymmetry/android-version-actions@v1.3 # Example action
        id: bump
        with:
          # Auto-increment versionCode by using the run number
          versionCode: ${{ github.run_number }}
          # You may choose to manually manage versionName with an action like 'version-increment' for semantic versioning
          gradlePath: app/build.gradle

      # 3. Commit the Version Changes (Crucial for next build)
      - name: Commit version updates
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add app/build.gradle
          # Create a new branch for the version commit to avoid constantly rewriting 'main'
          git commit -m "chore(release): version update to ${{ github.run_number }}"
          git push origin HEAD:${{ github.ref_name }} # Push to the same branch

      # 4. Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. Build Unsigned Release APK
      # We build the unsigned APK first, then sign it in the next step.
      - name: Build Release APK
        run: ./gradlew assembleRelease

      # 6. Securely Sign the APK using GitHub Secrets
      - name: Sign Android Release APK
        # This action decodes the Base64 key, signs the APK, and deletes the key file.
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          # The directory where the unsigned APK is located
          releaseDirectory: app/build/outputs/apk/release
          # The Base64 content of your JKS file (stored in GitHub Secret)
          signingKeyBase64: ${{ secrets.SIGNING_KEY_BASE64 }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
          # Specify the file extension you want to sign
          buildToolsVersion: "34.0.0" # Use a recent version

      # 7. Create Tag & Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump.outputs.versionName }}
          # Upload the *signed* APK. The 'sign-android-release' action renames the signed file
          files: app/build/outputs/apk/release/app-release-signed.apk
          body: |
            Automated release v${{ steps.bump.outputs.versionName }}
            Build: ${{ github.run_number }}
